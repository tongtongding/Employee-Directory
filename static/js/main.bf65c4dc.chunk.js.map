{"version":3,"sources":["components/Header/Header.js","components/search/Search.js","components/friendsList/FriendList.js","components/friendsListHeader/FriendListHeader.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","props","onChange","event","filterByName","target","value","type","placeholder","FriendList","alt","name","src","image","date","gender","FriendListHeader","scope","onClick","sortByName","App","state","friends","sort","searchFriends","filtered","filter","friend","toLowerCase","includes","setState","friendsAscend","a","b","friendsDescend","this","map","key","id","dateIntroduced","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"27EAceA,G,MAZA,WACX,OAEI,yBAAKC,UAAU,4DACf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,+BACA,uBAAGA,UAAU,QAAb,uFCOKC,EAZA,SAACC,GAET,OACQ,8BAEI,yBAAKF,UAAU,cACf,2BAAOG,SAAU,SAACC,GAASF,EAAMG,aAAaD,EAAME,OAAOC,QAASC,KAAK,OAAOR,UAAU,eAAeS,YAAY,c,OCazHC,G,MAlBI,SAACR,GAChB,OACI,oCACI,4BACI,4BACI,yBACIS,IAAKT,EAAMU,KACXC,IAAKX,EAAMY,SAGnB,4BAAKZ,EAAMU,MACX,4BAAKV,EAAMa,MACX,4BAAKb,EAAMc,YCGZC,EAjBU,SAACf,GACtB,OAGA,+BACI,4BACI,wBAAIgB,MAAM,OAAV,aACA,wBAAIA,MAAM,MAAMC,QAASjB,EAAMkB,YAA/B,QACA,wBAAIF,MAAM,OAAV,mBACA,wBAAIA,MAAM,OAAV,aCuDGG,E,4MAvDbC,MAAQ,CACNC,UACAC,KAAK,W,EAGPnB,aAAe,SAACoB,GAEd,IAAIC,EAAWH,EAAQI,QAAO,SAACC,GAC7B,OAAOA,EAAOhB,KAAKiB,cAAcC,SAASL,EAAcI,kBAE1D,EAAKE,SAAS,CAACR,QAAQG,K,EAGzBN,WAAa,WACX,GAAwB,YAApB,EAAKE,MAAME,KAAmB,CAChC,IAAIQ,EAAgB,EAAKV,MAAMC,QAAQC,MAAK,SAACS,EAAEC,GAAH,OAC5CD,EAAErB,KAAOsB,EAAEtB,KAAO,GAAK,KAEvB,EAAKmB,SAAS,CAACR,QAAQS,EAAcR,KAAK,eACvC,CACH,IAAIW,EAAiB,EAAKb,MAAMC,QAAQC,MAAK,SAACS,EAAEC,GAAH,OAC7CD,EAAErB,KAAOsB,EAAEtB,KAAO,GAAK,KAEvB,EAAKmB,SAAS,CAACR,QAAQY,EAAeX,KAAK,c,uDAM7C,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQnB,aAAgB+B,KAAK/B,eAC7B,2BAAOL,UAAU,uBACjB,kBAAC,EAAD,CAAkBoB,WAAYgB,KAAKhB,aACjC,+BACGgB,KAAKd,MAAMC,QAAQc,KAAI,SAAAT,GACtB,OAAO,kBAAC,EAAD,CACLU,IAAKV,EAAOW,GACZ3B,KAAMgB,EAAOhB,KACbE,MAAOc,EAAOd,MACdC,KAAMa,EAAOY,eACbxB,OAAQY,EAAOZ,mB,GA5CbyB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf65c4dc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n    return (\n\n        <div className=\"jumbotron jumbotron-fluid text-center bg-dark text-white\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Snoopy Characters Directory</h1>\n          <p className=\"lead\">Click on name to filter by heading or use the search box to narrow your results</p>\n        </div>\n      </div>\n    )\n};\n\nexport default Header;","import React from \"react\";\n\n\nconst Search = (props)=>{\n  \n       return (\n               <form>\n               \n                   <div className=\"form-group\">\n                   <input onChange={(event)=>{props.filterByName(event.target.value)}} type=\"text\" className=\"form-control\" placeholder=\"Search\"/>\n                   </div>\n               </form>     \n       )\n};\n\nexport default Search;\n","import React from \"react\";\nimport \"./FriendList.css\";\n\n\nconst FriendList = (props) => {\n    return (\n        <>\n            <tr>\n                <td>\n                    <img\n                        alt={props.name}\n                        src={props.image}\n                    />\n                </td>\n                <td>{props.name}</td>\n                <td>{props.date}</td>\n                <td>{props.gender}</td>\n            </tr>\n        </>\n    );\n};\n\nexport default FriendList;\n","import React from \"react\";\n\nconst FriendListHeader = (props) => {\n    return(\n\n   \n    <thead>\n        <tr>\n            <th scope=\"col\">Character</th>\n            <th scope=\"col\" onClick={props.sortByName}>Name</th>\n            <th scope=\"col\">Date Introduced</th>\n            <th scope=\"col\">Gender</th>\n        </tr>\n    </thead>\n   \n    )\n\n}\n\nexport default FriendListHeader;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/search/Search\"\nimport friends from \"./friends.json\";\nimport FriendList from \"./components/friendsList/FriendList\"\nimport FriendListHeader from \"./components/friendsListHeader/FriendListHeader\"\n\n\nclass App extends Component {\n\n  state = {\n    friends,\n    sort:\"descend\"\n  };\n\n  filterByName = (searchFriends) => {\n  \n    let filtered = friends.filter((friend) => {\n      return friend.name.toLowerCase().includes(searchFriends.toLowerCase())\n    })\n    this.setState({friends:filtered})\n  };\n\n  sortByName = () => {\n    if (this.state.sort === \"descend\"){\n      let friendsAscend = this.state.friends.sort((a,b)=>\n      a.name > b.name ? 1 : -1\n      )\n      this.setState({friends:friendsAscend,sort:\"ascend\"})\n    }else{\n      let friendsDescend = this.state.friends.sort((a,b)=>\n      a.name < b.name ? 1 : -1\n      )\n      this.setState({friends:friendsDescend,sort:\"descend\"})\n    }\n  };\n\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Search filterByName = {this.filterByName} />\n        <table className=\"table table-striped\">\n        <FriendListHeader sortByName={this.sortByName}/>\n          <tbody>\n            {this.state.friends.map(friend => {\n              return <FriendList\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                date={friend.dateIntroduced}\n                gender={friend.gender}\n              />\n            })}\n\n          </tbody>\n        </table>\n\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}